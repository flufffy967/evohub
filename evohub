-- Load Evocati Hub v0.32 (based on Kavo Library)
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library.CreateLib("Evocati Hub v0.32", "Ocean")

-- Create Tabs and Sections
local AdminTab = Window:NewTab("Admin")
local AdminSection = AdminTab:NewSection("Admin")
local PlayerTab = Window:NewTab("Player")
local MovementSection = PlayerTab:NewSection("Movement")
local FlightSection = PlayerTab:NewSection("Flight")
local PlayerSection = PlayerTab:NewSection("Player")
local ItemsTab = Window:NewTab("Items")
local ItemsSection = ItemsTab:NewSection("Items")
local InfoTab = Window:NewTab("Info")
local InfoSection = InfoTab:NewSection("Info")

-- Credits Dropdown
InfoSection:NewDropdown("Credits", "Credits for Evo Hub", 
{"-Evocati967 | Creator",
 "-WitchVR0390 | Helper",
  "-PrinceLion33 | Made kavo library"
}, function() print("madebyevocati967") end)

-- Known Issues Dropdown
InfoSection:NewDropdown("Known Issues", "Issues about Evo hub", 
{"-Invincibility cannot disable",
 "-walk+jump conflicts after reopen",
  "-No minimise button",
  "-Heal button doesn't function properly",
  "-In this dropdown, Clicking on an issue changes the title",
  "-Add a comment on the github to report more issues"
}, function() print("madebyevocati967") end)

-- Services and Variables
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer

local flightEnabled = false
local flightSpeed = 1
local vertical = 0
local directFlightMode = false
local animConnection
local infiniteJumpEnabled = false
local jumpConnection = nil
local defaultWalkSpeed = 16
local defaultJumpPower = 50
_G.JumpHeight = 50
local invincibilityEnabled = false
local invincibilityHealthConn = nil
local originalNewIndex = nil
local mxspd = maxspeedslider
local mxjmp = maxjumpslider

-- Utility functions
local function getHumanoid()
    local character = LocalPlayer.Character
    return character and character:FindFirstChildOfClass("Humanoid")
end

local function sendNotif(titel, txet)
    game:GetService("StarterGui"):SetCore("SendNotification", { 
        Title = titel,
        Text = txet,
        Icon = "rbxthumb://type=Asset&id=5107182114&w=150&h=150",
        Duration = 5
    })
end

local function getTorso()
    local character = LocalPlayer.Character
    return character and (character:FindFirstChild("UpperTorso") or character:FindFirstChild("Torso"))
end

local function freezeAnimations()
    local humanoid = getHumanoid()
    if not humanoid then return end
    for _, track in ipairs(humanoid:GetPlayingAnimationTracks()) do
        track:AdjustSpeed(0)
    end
end

local function unfreezeAnimations()
    local humanoid = getHumanoid()
    if not humanoid then return end
    for _, track in ipairs(humanoid:GetPlayingAnimationTracks()) do
        track:AdjustSpeed(1)
    end
end

-- Event Connections
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.E then
        vertical = 1
    elseif input.KeyCode == Enum.KeyCode.Q then
        vertical = -1
    end
end)

UserInputService.InputEnded:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.E or input.KeyCode == Enum.KeyCode.Q then
        vertical = 0
    end
end)

-- Flight Functions
local function flightLoop()
    local humanoid = getHumanoid()
    local torso = getTorso()
    if not humanoid or not torso then return end

    freezeAnimations()
    animConnection = humanoid.AnimationPlayed:Connect(function(track)
        track:AdjustSpeed(0)
    end)

    local bodyGyro = Instance.new("BodyGyro", torso)
    bodyGyro.P = 90000
    bodyGyro.MaxTorque = Vector3.new(9e9, 9e9, 9e9)
    bodyGyro.CFrame = torso.CFrame

    local bodyVelocity = Instance.new("BodyVelocity", torso)
    bodyVelocity.Velocity = Vector3.new(0, 0.1, 0)
    bodyVelocity.MaxForce = Vector3.new(9e9, 9e9, 9e9)

    humanoid.PlatformStand = true

    while flightEnabled and humanoid and humanoid.Health > 0 do
        RunService.RenderStepped:Wait()
        local effectiveSpeed = flightSpeed * 20
        local velocity = Vector3.new(0, 0, 0)
        local camera = workspace.CurrentCamera

        local vertical = 0
        if UserInputService:IsKeyDown(Enum.KeyCode.Q) then
            vertical = -1
        elseif UserInputService:IsKeyDown(Enum.KeyCode.E) then
            vertical = 1
        end

        if directFlightMode then
            local moveVector = Vector3.new(0, 0, 0)
            if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                moveVector = moveVector + Vector3.new(0, 0, -1)
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.S) then
                moveVector = moveVector + Vector3.new(0, 0, 1)
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.A) then
                moveVector = moveVector + Vector3.new(-1, 0, 0)
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.D) then
                moveVector = moveVector + Vector3.new(1, 0, 0)
            end
            moveVector = moveVector + Vector3.new(0, vertical, 0)
            
            if moveVector.Magnitude > 0 then
                velocity = camera.CFrame:VectorToWorldSpace(moveVector.Unit) * effectiveSpeed
            else
                velocity = Vector3.new(0, 0, 0)
            end
        else
            local moveDir = humanoid.MoveDirection
            velocity = (moveDir * effectiveSpeed) + Vector3.new(0, vertical * effectiveSpeed, 0)
        end

        bodyVelocity.Velocity = velocity

        if camera then
            bodyGyro.CFrame = camera.CFrame
        end
    end

    if animConnection then
        animConnection:Disconnect()
        animConnection = nil
    end
    bodyGyro:Destroy()
    bodyVelocity:Destroy()
    if humanoid then
        humanoid.PlatformStand = false
        unfreezeAnimations()
    end
end

local function toggleFlight()
    flightEnabled = not flightEnabled
    local status = flightEnabled and "Enabled" or "Disabled"
    sendNotif(status, "Flight")
    if flightEnabled then
        task.spawn(flightLoop)
    end
end

local function toggleFlightMode()
    directFlightMode = not directFlightMode
    local mode = directFlightMode and "Camera-Direct" or "Controlled"
    sendNotif(mode, "Flight Mode")
    print("Flight Mode: " .. mode)
end

-- Infinite Jump Functions
local function toggleInfiniteJump()
    infiniteJumpEnabled = not infiniteJumpEnabled
    if infiniteJumpEnabled then
        if not jumpConnection then
            jumpConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
                if gameProcessed then return end
                if input.KeyCode == Enum.KeyCode.Space then
                    local humanoid = getHumanoid()
                    if humanoid and humanoid:GetState() ~= Enum.HumanoidStateType.Seated then
                        local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                        if hrp then
                            hrp.Velocity = Vector3.new(hrp.Velocity.X, _G.JumpHeight, hrp.Velocity.Z)
                        end
                    end
                end
            end)
        end
    else
        if jumpConnection then
            jumpConnection:Disconnect()
            jumpConnection = nil
        end
    end
    local status = infiniteJumpEnabled and "Enabled" or "Disabled"
    sendNotif(status, "Infinite Jump")
end

-- Invincibility Functions
local function enableInvincibility()
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end

    humanoid.MaxHealth = 69420
    humanoid.Health = 69420

    invincibilityHealthConn = humanoid:GetPropertyChangedSignal("Health"):Connect(function()
        if humanoid.Health < math.huge then
            humanoid.Health = math.huge
        end
    end)

    humanoid:SetStateEnabled(Enum.HumanoidStateType.Dead, false)

    for _, part in pairs(character:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanTouch = false
        end
    end

    local mt = getrawmetatable(game)
    setreadonly(mt, false)
    originalNewIndex = originalNewIndex or mt.__newindex
    mt.__newindex = newcclosure(function(self, key, value)
        if self == humanoid and key == "Health" and value < math.huge then
            return
        end
        return originalNewIndex(self, key, value)
    end)

    LocalPlayer.CharacterAdded:Connect(function(newCharacter)
        wait(0.1)
        character = newCharacter
        humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.Health = math.huge
            humanoid.MaxHealth = math.huge
        end
    end)
end

local function disableInvincibility()
    if invincibilityHealthConn then
        invincibilityHealthConn:Disconnect()
        invincibilityHealthConn = nil
    end

    LocalPlayer:LoadCharacter()
    local character = LocalPlayer.CharacterAdded:Wait()
    local rootPart = character:WaitForChild("HumanoidRootPart")

    if originalNewIndex then
        local mt = getrawmetatable(game)
        mt.__newindex = originalNewIndex
    end
end

local function toggleInvincibility()
    invincibilityEnabled = not invincibilityEnabled
    local status = invincibilityEnabled and "Enabled" or "Disabled"
    sendNotif(status, "Invincibility")
    if invincibilityEnabled then
        enableInvincibility()
    else
        disableInvincibility()
    end
end

-- UI Elements

-- Admin Button: Infinite Yield FE
AdminSection:NewButton("Infinite Yield FE", "A popular 'admin' console", function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source", true))()
end)

AdminSection:NewButton("HatHub (Just a baseplate)", "Only works on 'Just a baseplate'", function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/inkdupe/hat-scripts/refs/heads/main/updatedhathub.lua"))()
end)

-- Movement Section UI Elements
MovementSection:NewSlider("WalkSpeed", "How fast you walk", mxspd, 16, function(value)
    local humanoid = getHumanoid()
    if humanoid then
        humanoid.WalkSpeed = value
        defaultWalkSpeed = value
    end
end)

MovementSection:NewSlider("Jump Power", "How high you jump", mxjmp, 50, function(value)
    local humanoid = getHumanoid()
    if humanoid then
        humanoid.UseJumpPower = true
        humanoid.JumpPower = value
        defaultJumpPower = value
    end
    _G.JumpHeight = value
end)

-- Monitor WalkSpeed and JumpPower to prevent changes
RunService.Stepped:Connect(function()
    local humanoid = getHumanoid()
    if humanoid then
        if humanoid.WalkSpeed ~= defaultWalkSpeed then
            humanoid.WalkSpeed = defaultWalkSpeed
        end
        if humanoid.JumpPower ~= defaultJumpPower then
            humanoid.JumpPower = defaultJumpPower
        end
    end
end)

FlightSection:NewButton("Toggle Flight", "Enables and Disables flight", function()
    toggleFlight()
end)

FlightSection:NewSlider("FlightSpeed", "Change the speed of flight", 100, 1, function(s)
    flightSpeed = s
end)

FlightSection:NewButton("Toggle Flight Mode", "Switch between Controlled and Camera-Direct flight", function()
    toggleFlightMode()
end)

MovementSection:NewButton("Toggle Infinite Jump", "Enables or disables infinite jumping", function()
    toggleInfiniteJump()
end)

-- Player Section UI Elements
local healthSlider = PlayerSection:NewSlider("Max Health", "Change your max health", 10000, 100, function(s)
    if invincibilityEnabled then
        return
    end
    local humanoid = getHumanoid()
    if humanoid then
        humanoid.MaxHealth = s
        humanoid.Health = s
    end
end)

PlayerSection:NewButton("Heal", "Refills your health", function()
    local humanoid = getHumanoid()
    if humanoid then
        while humanoid.Health < humanoid.MaxHealth do
            humanoid:TakeDamage(-humanoid.Health-humanoid.MaxHealth)
            wait(0)
        end
    end
end)

PlayerSection:NewButton("Toggle Invincibility", "Enables or Disables invincibility", function()
    toggleInvincibility()
end)

ItemsSection:NewButton("Click Teleport", "Wherever you click, you get teleported", function()
    local mouse = game.Players.LocalPlayer:GetMouse()
    local tool = Instance.new("Tool")
    tool.RequiresHandle = false
    tool.Name = "Click Teleport"
    tool.Activated:connect(function()
        local pos = mouse.Hit + Vector3.new(0, 2.5, 0)
        pos = CFrame.new(pos.X, pos.Y, pos.Z)
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = pos
    end)
    tool.Parent = game.Players.LocalPlayer.Backpack
end)

ItemsSection:NewButton("Jerk Off", "Jerk off item", function()
    local function isR6(character)
        return character:FindFirstChild("Torso") and not character:FindFirstChild("UpperTorso")
    end

    local function isR15(character)
        return character:FindFirstChild("UpperTorso") ~= nil
    end

    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()

    if isR6(character) then
        loadstring(game:HttpGet("https://pastefy.app/wa3v2Vgm/raw"))()
        sendNotif("Jerk Off", "Item received")
    elseif isR15(character) then
        loadstring(game:HttpGet("https://pastefy.app/YZoglOyJ/raw"))()
        sendNotif("Jerk Off", "Item received")
    else
        sendNotif("Jerk Off Error:", "Unknown character type")
    end
end)
