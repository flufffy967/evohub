-- Load Evocati Hub v0.30 (based on Kavo Library)
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library.CreateLib("Evocati Hub v0.30", "Ocean")

-- Create Tabs and Sections
local AdminTab = Window:NewTab("Admin")
local AdminSection = AdminTab:NewSection("Admin")
local PlayerTab = Window:NewTab("Player")
local MovementSection = PlayerTab:NewSection("Movement")
local FlightSection = PlayerTab:NewSection("Flight")
local PlayerSection = PlayerTab:NewSection("Player")
local ItemsTab = Window:NewTab("Items")
local ItemsSection = ItemsTab:NewSection("Items")
local InfoTab = Window:NewTab("Info")
local InfoSection = InfoTab:NewSection("Info")

InfoSection:NewDropdown("Known Issues", "Issues about Evo hub", {"-Invincibility cannot fully disable", "-Scripts continue after close", "-No minimise button","-Heal button doesn't function properly","-In this dropdown, Clicking on an issue changes the title","-Hathub ui looks bad, will probably import in here","-Jerk off names arent consistent","-Add a comment on the github to report more issues"}, function(currentOption)
    print("madebyevocati967")
end)

-- Services and Variables
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer

local flightEnabled = false
local flightSpeed = 1
local vertical = 0
local directFlightMode = false
local animConnection

-- Infinite Jump Variables
local infiniteJumpEnabled = false
local jumpConnection = nil
local defaultWalkSpeed = 16
local defaultJumpPower = 50
_G.JumpHeight = 50

-- Invincibility Variables
local invincibilityEnabled = false
local invincibilityHealthConn = nil
local originalNewIndex = nil

-- Utility functions to get character parts
local function getHumanoid()
    local character = LocalPlayer.Character
    return character and character:FindFirstChildOfClass("Humanoid")
end

local function sendNotif()
	game:GetService("StarterGui"):SetCore("SendNotification", { 
	Title = titel;
	Text = txet;
	Icon = "rbxthumb://type=Asset&id=5107182114&w=150&h=150"})
	Duration = 5;
end

local function getTorso()
    local character = LocalPlayer.Character
    return character and (character:FindFirstChild("UpperTorso") or character:FindFirstChild("Torso"))
end

-- Freeze current playing animations by setting their anim speed to 0
local function freezeAnimations()
    local humanoid = getHumanoid()
    if not humanoid then return end
    for _, track in ipairs(humanoid:GetPlayingAnimationTracks()) do
        track:AdjustSpeed(0)
    end
end

-- Unfreeze animations by resetting their speed to 1
local function unfreezeAnimations()
    local humanoid = getHumanoid()
    if not humanoid then return end
    for _, track in ipairs(humanoid:GetPlayingAnimationTracks()) do
        track:AdjustSpeed(1)
    end
end

-- Set up vertical movement keybindings (E for up, Q for down)
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.E then
        vertical = 1
    elseif input.KeyCode == Enum.KeyCode.Q then
        vertical = -1
    end
end)

UserInputService.InputEnded:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.E or input.KeyCode == Enum.KeyCode.Q then
        vertical = 0
    end
end)

-- Flight loop: sets up flight physics, freezes animations, and updates velocity in real time.
local function flightLoop()
    local humanoid = getHumanoid()
    local torso = getTorso()
    if not humanoid or not torso then return end

    -- Freeze animations immediately and pause any new ones
    freezeAnimations()
    animConnection = humanoid.AnimationPlayed:Connect(function(track)
        track:AdjustSpeed(0)
    end)

    -- Create flight physics objects
    local bodyGyro = Instance.new("BodyGyro", torso)
    bodyGyro.P = 90000
    bodyGyro.MaxTorque = Vector3.new(9e9, 9e9, 9e9)
    bodyGyro.CFrame = torso.CFrame

    local bodyVelocity = Instance.new("BodyVelocity", torso)
    bodyVelocity.Velocity = Vector3.new(0, 0.1, 0)
    bodyVelocity.MaxForce = Vector3.new(9e9, 9e9, 9e9)

    -- Freeze default humanoid control
    humanoid.PlatformStand = true

    -- Flight update loop
    while flightEnabled and humanoid and humanoid.Health > 0 do
        RunService.RenderStepped:Wait()
        local effectiveSpeed = flightSpeed * 20
        local velocity = Vector3.new(0, 0, 0)
        local camera = workspace.CurrentCamera

        -- Capture vertical input for Q (down) and E (up)
        local vertical = 0
        if UserInputService:IsKeyDown(Enum.KeyCode.Q) then
            vertical = -1 -- Move down
        elseif UserInputService:IsKeyDown(Enum.KeyCode.E) then
            vertical = 1 -- Move up
        end

        if directFlightMode then
            -- Camera-Direct mode: move only when WASD (and vertical) keys are pressed
            local moveVector = Vector3.new(0, 0, 0)
            if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                moveVector = moveVector + Vector3.new(0, 0, -1)
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.S) then
                moveVector = moveVector + Vector3.new(0, 0, 1)
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.A) then
                moveVector = moveVector + Vector3.new(-1, 0, 0)
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.D) then
                moveVector = moveVector + Vector3.new(1, 0, 0)
            end
            moveVector = moveVector + Vector3.new(0, vertical, 0)
            
            if moveVector.Magnitude > 0 then
                velocity = camera.CFrame:VectorToWorldSpace(moveVector.Unit) * effectiveSpeed
            else
                velocity = Vector3.new(0, 0, 0)
            end
        else
            -- Controlled mode: use Humanoid.MoveDirection and vertical input
            local moveDir = humanoid.MoveDirection
            velocity = (moveDir * effectiveSpeed) + Vector3.new(0, vertical * effectiveSpeed, 0)
        end

        bodyVelocity.Velocity = velocity

        if camera then
            bodyGyro.CFrame = camera.CFrame
        end
    end

    -- Cleanup when flight is turned off or player dies
    if animConnection then
        animConnection:Disconnect()
        animConnection = nil
    end
    bodyGyro:Destroy()
    bodyVelocity:Destroy()
    if humanoid then
        humanoid.PlatformStand = false
        unfreezeAnimations()
    end
end

-- Toggle flight on/off
local function toggleFlight()
	if flightEnabled == false then
		titel = "Enabled"
	else
		titel = "Disabled"
	end
	txet = "Flight"
	sendNotif()
    flightEnabled = not flightEnabled
    if flightEnabled then
        task.spawn(flightLoop)
    end
end

-- Toggle flight mode: Controlled vs. Camera-Direct
local function toggleFlightMode()
	if directFlightMode == false then
		titel = "Camera-Direct"
	else
		titel = "Controlled"
	end
	txet = "Flight Mode"
	sendNotif()
    directFlightMode = not directFlightMode
    local mode = directFlightMode and "Camera-Direct" or "Controlled"
    print("Flight Mode: " .. mode)
end

-- Toggle infinite jump on/off
local function toggleInfiniteJump()
    infiniteJumpEnabled = not infiniteJumpEnabled
    if infiniteJumpEnabled then
        if not jumpConnection then
            jumpConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
                if gameProcessed then return end
                if input.KeyCode == Enum.KeyCode.Space then
                    local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
                    if humanoid and humanoid:GetState() ~= Enum.HumanoidStateType.Seated then
                        local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                        if hrp then
                            -- Preserve the X and Z velocity, only change the Y
                            hrp.Velocity = Vector3.new(hrp.Velocity.X, _G.JumpHeight, hrp.Velocity.Z)
                        end
                    end
                end
            end)
        end
    else
        if jumpConnection then
            jumpConnection:Disconnect()
            jumpConnection = nil
        end
    end
end


-- Invincibility script
local LocalPlayer = game:GetService("Players").LocalPlayer
local RunService = game:GetService("RunService")
local mt = getrawmetatable(game)
setreadonly(mt, false)

local function enableInvincibility()
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end

    -- Set infinite health
    humanoid.MaxHealth = math.huge
    humanoid.Health = math.huge

    -- Prevent health reductions
    invincibilityHealthConn = humanoid:GetPropertyChangedSignal("Health"):Connect(function()
        if humanoid.Health < math.huge then
            humanoid.Health = math.huge
        end
    end)

    -- Disable death state
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Dead, false)

    -- Disable `BreakJoints` to prevent forced death
    character.BreakJoints = function() end

    -- Make body parts immune to kill parts
    for _, part in pairs(character:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanTouch = false
            part.Touched:Connect(function(hit)
                if hit.Parent and hit.Parent:FindFirstChildOfClass("Humanoid") then
                    humanoid.Health = math.huge
                end
            end)
        end
    end

    -- Block `TakeDamage()`
    local oldTakeDamage = humanoid.TakeDamage
    humanoid.TakeDamage = function() end

    -- Block external attempts to change health
    originalNewIndex = originalNewIndex or mt.__newindex
    mt.__newindex = newcclosure(function(self, key, value)
        if self == humanoid and key == "Health" and value < math.huge then
            return
        end
        return originalNewIndex(self, key, value)
    end)

    -- Auto-respawn invincibility
    LocalPlayer.CharacterAdded:Connect(function(newCharacter)
        wait(0.5)  -- Delay to let character fully load
        enableInvincibility()  -- Reapply invincibility
    end)
end


local function disableInvincibility() -- broken, idk how to make this work right
    if invincibilityHealthConn then
        invincibilityHealthConn:Disconnect()
        invincibilityHealthConn = nil
    end

    LocalPlayer:LoadCharacter()
    local character = LocalPlayer.CharacterAdded:Wait()
    local rootPart = character:WaitForChild("HumanoidRootPart")

    if originalNewIndex then
        local mt = getrawmetatable(game)
        mt.__newindex = originalNewIndex
    end
end


local function toggleInvincibility()
		if invincibilityEnabled == false then
		titel = "Enabled"
	else
		titel = "Disabled"
	end
	txet = "Invincibility"
	sendNotif()
    invincibilityEnabled = not invincibilityEnabled
    if invincibilityEnabled then
        enableInvincibility()
        -- Change the health slider text to indicate it is disabled
        if healthSlider and healthSlider.Main then
            local title = healthSlider.Main:FindFirstChild("Title") -- UPDATE THIS
            if title then
                title.Text = "Health (disabled)"
            end
        end
    else
        disableInvincibility()
        if healthSlider and healthSlider.Main then
            local title = healthSlider.Main:FindFirstChild("Title")
            if title then
                title.Text = "Health"
            end
        end
    end
end

-- UI Elements

-- Admin Button: Infinite Yield FE
AdminSection:NewButton("Infinite Yield FE", "A popular 'admin' console", function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source", true))()
end)

AdminSection:NewButton("HatHub (Just a baseplate)", "Only works on 'Just a baseplate'", function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/inkdupe/hat-scripts/refs/heads/main/updatedhathub.lua"))()
end)

-- Movement Section UI Elements
MovementSection:NewSlider("WalkSpeed", "How fast you walk", 500, 16, function(value)
    local humanoid = getHumanoid()
    if humanoid then
        humanoid.WalkSpeed = value
        defaultWalkSpeed = value
    end
end)

MovementSection:NewSlider("Jump Power", "How high you jump", 250, 50, function(value)
    local humanoid = getHumanoid()
    if humanoid then
		humanoid.UseJumpPower = true
        humanoid.JumpPower = value
        defaultJumpPower = value

    end
	_G.JumpHeight = value
end)

-- Monitor WalkSpeed and JumpPower to prevent changes
RunService.Stepped:Connect(function()
    local humanoid = getHumanoid()
    if humanoid then
        if humanoid.WalkSpeed ~= defaultWalkSpeed then
            humanoid.WalkSpeed = defaultWalkSpeed
        end
        if humanoid.JumpPower ~= defaultJumpPower then
            humanoid.JumpPower = defaultJumpPower
        end
    end
end)

FlightSection:NewButton("Toggle Flight", "Enables and Disables flight", function()
    toggleFlight()
end)

FlightSection:NewSlider("FlightSpeed", "Change the speed of flight", 100, 1, function(s)
    flightSpeed = s
end)

FlightSection:NewButton("Toggle Flight Mode", "Switch between Controlled and Camera-Direct flight", function()
    toggleFlightMode()
end)

MovementSection:NewButton("Toggle Infinite Jump", "Enables or disables infinite jumping", function()
    toggleInfiniteJump()
	if infiniteJumpEnabled == true then
		titel = "Enabled"
	else
		titel = "Disabled"
	end
	txet = "Infinite Jump"
	sendNotif()
end)

-- Player Section UI Elements
local healthSlider = PlayerSection:NewSlider("Max Health", "Change your max health", 10000, 100, function(s)
    if invincibilityEnabled then
        return  -- Ignore changes while invincibility is active
    end
    local humanoid = getHumanoid()
    if humanoid then
        humanoid.MaxHealth = s
        humanoid.Health = s
    end
end)

PlayerSection:NewButton("Heal", "Refills your health", function()
    local humanoid = getHumanoid()
    if humanoid then
        -- Apply negative damage to heal
        while humanoid.Health < humanoid.MaxHealth do
            humanoid:TakeDamage(-humanoid.Health-humanoid.MaxHealth)  -- Applying negative damage to heal
            wait(0)  -- Delay to allow the health to regenerate
        end
    end
end)

PlayerSection:NewButton("Toggle Invincibility", "Enables or Disables invincibility", function()
    toggleInvincibility()
end)

ItemsSection:NewButton("Click Teleport", "Wherever you click, you get teleported", function()
    mouse = game.Players.LocalPlayer:GetMouse()
	tool = Instance.new("Tool")
	tool.RequiresHandle = false
	tool.Name = "Click Teleport"
	tool.Activated:connect(function()
	local pos = mouse.Hit+Vector3.new(0,2.5,0)
	pos = CFrame.new(pos.X,pos.Y,pos.Z)
	game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = pos
	end)
	tool.Parent = game.Players.LocalPlayer.Backpack
	end)

ItemsSection:NewButton("Jerk Off", "Jerk off item", function()
	local function isR6(character)
    	return character:FindFirstChild("Torso") and not character:FindFirstChild("UpperTorso")
	end

	local function isR15(character)
    	return character:FindFirstChild("UpperTorso") ~= nil
	end

	local player = game.Players.LocalPlayer
	local character = player.Character or player.CharacterAdded:Wait()

	if isR6(character) then
    	loadstring(game:HttpGet("https://pastefy.app/wa3v2Vgm/raw"))()

		-- Set notification values BEFORE calling sendNotif()
		title = "Jerk Off"
		text = "Item received"
		sendNotif()
		
	elseif isR15(character) then
    	loadstring(game:HttpGet("https://pastefy.app/YZoglOyJ/raw"))()

		-- Set notification values BEFORE calling sendNotif()
		title = "Jerk Off"
		text = "Item received"
		sendNotif()
		
	else
    	title = "Jerk Off Error:"
		text = "Unknown character type"
		sendNotif()
	end
end)
